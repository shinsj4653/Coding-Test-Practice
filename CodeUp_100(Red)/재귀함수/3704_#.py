#규칙 찾기
#계단 0 개 : 경우의 수 1개
#계단 1 개 : 경우의 수 1개
#계단 2 개 : 경우의 수 2개
#계단 3 개 : 경우의 수 4개
#계단 4 개 : 경우의 수 7개
#규칙 : f(n) = f(n - 3) + f(n - 2) + f(n - 1)
#DP(동적계획법) : 큰 문제를 해결하기 위해 작은 문제들을 해결
#메모이제이션 기법 : 계속 반복되지만, 그 결과값은 변하지 않는 작은 문제들의 결과값을 저장하는것

#재귀함수 구현할때
# 1. 탈출 조건을 잘 정해야한다.
# 2. 재귀함수의 효율성 많이 떨어지는 경우, 재귀함수 한 번 호출될 때마다의 결과값을 저장하여 효율성 증대.

def stair(n) :

    if n < 0 :
        return 0
    
    elif n == 0 :
        return 1
    
    else : 
        if not l[n] :
            l[n] = (stair(n - 3) + stair(n - 2) + stair(n - 1)) % 1000
        return l[n]
        

l = [0] * 100001
n = int(input())
print(stair(n))
